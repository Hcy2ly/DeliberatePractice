/*****
 * 移除指针
 * 要知道数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。 // 所以被想着用删除的方式删除数组中的某个元素。
 */

// 题目
// 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
// 不要使用额外的数组空间，你必须仅使用 $O(1)$ 额外空间并原地修改输入数组。
// 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

//  示例 1: 给定 nums = [3, 2, 2, 3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。

//  示例 2: 给定 nums = [0, 1, 2, 2, 3, 0, 4, 2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。你不需要考虑数组中超出新长度后面的元素。


// 思路   ===> 快慢指针
// 题目要求强调了两个：1. 不要使用额外的数组空间。===> 说明不能用新的数组去一一赋值。  2. 不用管超出数组长度的部分 ===> 说明数组长度可能没变，只是需要把现在这个与目标值相同的元素值移除掉。怎么移除？通常情况下，删除一个数组元素，就是数组长度减少，所有元素下标往前移。现在在不修改数组长度的情况，把现在这个与目标值相同的元素值移除掉，就是把该下标的值用后面的值修改掉简单说，就是移动值的位置，后面空出来的位置不管。
// [1,2,3,5,2,4] 移除2   ====>   [1, 3, 5, 4, null, null]

function removeElement(arr, target) {
  let len = arr.length;
  let j = 0; // 此为慢指针。

  for (let i = 0; i < len; i++) { // i为快指针
    if (arr[i] !== target) {
      arr[j] = arr[i]
      console.log('慢指针元素值', arr[j])
      j++;
    }
  }

  return j
}

const arr = [1, 2, 3, 4, 5, 5, 6, 7, 9, 5, 10]
// const arr = [1, 2, 5, 6, 5, 3, 4]
const removeTarget = 5
console.log(removeElement(arr, removeTarget))